# -*- coding: utf-8 -*-
"""W&B + RandomSearch + Lime, Moggio 2014-2020, PM10, predicts 1 day.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f_XV0I7Nz7u44VqDJCbTyFV1RDry9Y7F
"""

#%%
from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
import seaborn as sns
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
from tensorflow.keras.callbacks import EarlyStopping

# Commented out IPython magic to ensure Python compatibility.
# %%
# !pip install wandb
import wandb
from wandb.keras import WandbCallback


#table = read_csv('/content/drive/MyDrive/Quadranti.csv') # Marco
table = read_csv('/Users/davidguzman/Documents/GitHub/GitTesi/Python/Quadranti.csv') # David
table.head()

#Moggio = table.loc[table.loc[:,"NameStation"]=="Moggio",:]
Moggio = table.loc[:,["Date","PM10","PM25","Ammonia","Wind_speed","Quadrante","Temperature","Rainfall"]]
Moggio = Moggio.dropna(how="any")
Moggio = Moggio.reset_index()
Moggio = Moggio.iloc[:-365,:] # we train not using 2020, for now
Moggio.head()


"""##Convert series to supervised learning
### Activation function = tanh and logistic (s curve)

###Conversion Function
"""

from pandas import DataFrame
from pandas import concat
 
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	"""
	Frame a time series as a supervised learning dataset.
	Arguments:
		data: Sequence of observations as a list or NumPy array.
		n_in: Number of lag observations as input (X).
		n_out: Number of observations as output (y).
		dropnan: Boolean whether or not to drop rows with NaN values.
	Returns:
		Pandas DataFrame of series framed for supervised learning.
	"""
	n_vars = 1 if type(data) is list else data.shape[1]
	df = DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg

"""### Conversion of Moggio"""

values = Moggio.iloc[:,2:].values
# ensure all data is float
values = values.astype('float32') #cast in float 32 bit per evitare problemi
# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# frame as supervised learning
n_days = 5 #Memoria della NN
reframed = series_to_supervised(scaled, n_days, 1) # info of the past 5 days to determine next (1) day
# drop columns we don't want to predict (we therefore keep Ammonia)
reframed.drop(reframed.columns[[36, 37,38,39,40,41]], axis=1, inplace=True)

print(reframed.shape)
reframed.head()

# split into train and test sets
values = reframed.values
n_features = 7 # number of variables, including the one to be predicted
n_train_days = 1312 # we train using only the first year
train = values[:n_train_days, :]
test = values[n_train_days:, :] # we test using all successive years 
# split into input and outputs
n_obs = n_days * n_features
train_X, train_y = train[:, :n_obs], train[:, -1]
test_X, test_y = test[:, :n_obs], test[:, -1]
print(train_X.shape, len(train_X), train_y.shape)
# reshape input to be 3D [samples, timesteps, features]
# reshape from 2D to 3D
train_X = train_X.reshape((train_X.shape[0], n_days, n_features))
test_X = test_X.reshape((test_X.shape[0], n_days, n_features))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

"""# Modeling and training"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install keras-tuner
# from tensorflow import keras
# import keras_tuner as kt

class MyHyperModel(kt.HyperModel):
    def build(self, hp):
        wandb.init(project="my-test-project", entity="davidguzmanp")

        hp_units = hp.Int('units', min_value=10, max_value=60, step=10)
        hp_dropout = hp.Choice('dropout', values=[0.0, 0.25, 0.5, 0.75])
        model = Sequential()
        model.add(LSTM(units = hp_units,return_sequences=True, dropout = hp_dropout, input_shape=(train_X.shape[1], train_X.shape[2])))
        for i in range(hp.Int('layers',1,4)):
            model.add(LSTM(units = hp_units, return_sequences=True))
        model.add(LSTM(units = hp_units, return_sequences=False))
        model.add(Dense(1))
        hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])
        model.compile(loss='mae', optimizer=keras.optimizers.Adam(learning_rate=hp_learning_rate))
        return model

    def fit(self, hp, model, *args, **kwargs):
        return model.fit(
            *args,
            batch_size=hp.Choice("batch_size", [16, 32, 64, 128]),
            **kwargs,
        )

tuner = kt.RandomSearch(
    MyHyperModel(),
    objective='val_loss',
    max_trials=2,
    executions_per_trial =1,
    overwrite=True,
    directory = 'dir',
    project_name = 'tune_hypermodel')
tuner.search_space_summary()

early_stopping = EarlyStopping(monitor='val_loss',patience=50)
tuner.search(train_X, train_y, epochs=10, validation_data=(test_X, test_y),shuffle=False, callbacks=[early_stopping, WandbCallback()])

tuner.results_summary()

model = tuner.get_best_models()[0]
model.summary()

"""## Predictions of the year 2019"""

# make a prediction
yhat = model.predict(test_X)
#Convert from 3D to 2D
n_features = 7
test_X = test_X.reshape((test_X.shape[0], n_days*n_features))
# invert scaling for forecast
inv_yhat = concatenate((yhat, test_X[:, -6:]), axis=1)
inv_yhat = scaler.inverse_transform(inv_yhat)
inv_yhat = inv_yhat[:,0]
# invert scaling for actual
test_y = test_y.reshape((len(test_y), 1))
inv_y = concatenate((test_y, test_X[:, -6:]), axis=1)
inv_y = scaler.inverse_transform(inv_y)
inv_y = inv_y[:,0]
# calculate RMSE
rmse = sqrt(mean_squared_error(inv_y, inv_yhat))
print('Test RMSE: %.3f' % rmse)

"""#### Prediciton plots"""

pyplot.plot(inv_yhat, label = 'Prediction')
pyplot.plot(inv_y, label = 'Real')
pyplot.title("Previsione con Ammonia e PM 2.5")
pyplot.xlabel('Days') 
pyplot.ylabel('PM10 [ug/m^3])') 
pyplot.legend()
pyplot.show()

"""prediction with 2020"""

#Moggio = table.loc[table.loc[:,"NameStation"]=="Moggio",:]

Moggio = table.loc[:,["Date","PM10","PM25","Ammonia","Wind_speed","Quadrante","Temperature","Rainfall"]]
Moggio = Moggio.dropna(how="any")
Moggio = Moggio.reset_index()
Moggio = Moggio.iloc[:,:] # this is the differrence!!!!
Moggio.head()
values = Moggio.iloc[:,2:].values
# ensure all data is float
values = values.astype('float32') #cast in float 32 bit per evitare problemi
# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# frame as supervised learning
n_days = 5 #Memoria della NN
reframed = series_to_supervised(scaled, n_days, 1) # info of the past 5 days to determine next (1) day
# drop columns we don't want to predict (we therefore keep Ammonia)
reframed.drop(reframed.columns[[36, 37,38,39,40,41]], axis=1, inplace=True)


# split into train and test sets
values = reframed.values
n_features = 7 # number of variables, including the one to be predicted
n_train_days = 1312 # we train using only the first year
train = values[:n_train_days, :]
test = values[n_train_days:, :] # we test using all successive years 
# split into input and outputs
n_obs = n_days * n_features
train_X, train_y = train[:, :n_obs], train[:, -1]
test_X, test_y = test[:, :n_obs], test[:, -1]
print(train_X.shape, len(train_X), train_y.shape)
# reshape input to be 3D [samples, timesteps, features]
# reshape from 2D to 3D
train_X = train_X.reshape((train_X.shape[0], n_days, n_features))
test_X = test_X.reshape((test_X.shape[0], n_days, n_features))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

# make a prediction
yhat = model.predict(test_X)
#Convert from 3D to 2D
test_X = test_X.reshape((test_X.shape[0], n_days*n_features))
# invert scaling for forecast
inv_yhat = concatenate((yhat, test_X[:, -6:]), axis=1)
inv_yhat = scaler.inverse_transform(inv_yhat)
inv_yhat = inv_yhat[:,0]
# invert scaling for actual
test_y = test_y.reshape((len(test_y), 1))
inv_y = concatenate((test_y, test_X[:, -6:]), axis=1)
inv_y = scaler.inverse_transform(inv_y)
inv_y = inv_y[:,0]
# calculate RMSE
rmse = sqrt(mean_squared_error(inv_y, inv_yhat))
print('Test RMSE: %.3f' % rmse)

pyplot.plot(inv_yhat[-365:], label = 'Prediction')
pyplot.plot(inv_y[-365:], label = 'Real')
pyplot.title("Previsione con Ammonia e PM 2.5")
pyplot.xlabel('Days') 
pyplot.ylabel('PM10 [ug/m^3])') 
pyplot.legend()
pyplot.show()

"""# LIME

"""


from lime import lime_tabular

test_X.shape

train_X = train_X.reshape((train_X.shape[0], n_days, n_features))

explainer = lime_tabular.RecurrentTabularExplainer(train_X, feature_names=["PM10","PM25","Ammonia","Wind_speed","Quadrante","Temperature","Rainfall"], mode='regression')

exp = explainer.explain_instance(train_X[50], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()

exp = explainer.explain_instance(train_X[49], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()

exp = explainer.explain_instance(train_X[75], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()

exp = explainer.explain_instance(train_X[345], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()

exp = explainer.explain_instance(train_X[346], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()

exp = explainer.explain_instance(train_X[347], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()

exp = explainer.explain_instance(train_X[348], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()

exp = explainer.explain_instance(train_X[349], model.predict, num_features=6,labels=(1,))
exp.show_in_notebook()